/*
 /* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulb.lisa.infoh400.labs2022.view;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ulb.lisa.infoh400.labs2022.controller.PatientJpaController;
import ulb.lisa.infoh400.labs2022.controller.PersonJpaController;
import ulb.lisa.infoh400.labs2022.controller.exceptions.IllegalOrphanException;
import ulb.lisa.infoh400.labs2022.controller.exceptions.NonexistentEntityException;
import ulb.lisa.infoh400.labs2022.model.Patient;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Color;
import javax.swing.JButton;

/**
 *
 * @author Adrien Foucart
 */
public class AddPatientWindow extends javax.swing.JFrame {
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("infoh400_PU");
    private final PatientJpaController patientCtrl = new PatientJpaController(emfac);
    private final PersonJpaController personCtrl = new PersonJpaController(emfac);
    
    private static final Logger LOGGER = LogManager.getLogger(AddPatientWindow.class.getName());
    
    Patient patient = null;
    
    /**
     * Creates new form AddPatientWindow
     */
    public AddPatientWindow() {
        initComponents();
    }
    
    public void setPatient(Patient patient){
        this.patient = patient;
        
        addPersonPanel.setPerson(patient.getIdperson());
        phonenumberTextField.setText(patient.getPhonenumber());
        statusComboBox.setSelectedItem(patient.getStatus());
    }
    
    public Patient getPatient(){
        updatePatient();
                
        return patient;
    }
    
    public void updatePatient(){
        if( patient == null ){
            patient = new Patient();
        }
        
        patient.setIdperson(addPersonPanel.getPerson());
        patient.setPhonenumber(phonenumberTextField.getText());
        patient.setStatus((String) statusComboBox.getSelectedItem());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addPersonPanel = new ulb.lisa.infoh400.labs2022.view.AddPersonPanel();
        jLabel2 = new javax.swing.JLabel();
        phonenumberTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();

        
        
        statusComboBox.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String x = (String) statusComboBox.getSelectedItem();
        		
        		Color c1 = new Color(0,204,0);
        		Color c2 = new Color(128,128,128);
        		Color c3 = new Color(204,0,0);
        		
        		if (x == "Active") {
        			addPersonPanel.setBackground(c1);
        			}
        		else if (x == "Inactive") {
        			addPersonPanel.setBackground(c2);
        		}
        		else if (x == "Banned") {
        			addPersonPanel.setBackground(c3);
        		}
        	}
        });
        
        
        
        
        

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Patient");

        jLabel2.setText("Phone Number:");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Status:");

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Inactive", "Banned" }));
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(20)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jLabel3)
        					.addGap(40)
        					.addComponent(statusComboBox, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel2)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(phonenumberTextField, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(saveButton)
        							.addGap(18)
        							.addComponent(cancelButton)))
        					.addContainerGap(178, Short.MAX_VALUE))))
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(addPersonPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(addPersonPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(phonenumberTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel3)
        				.addComponent(statusComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(saveButton)
        				.addComponent(cancelButton))
        			.addGap(0, 5, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        updatePatient();

        // Create person if necessary:
        if( patient.getIdperson().getIdperson() == null ){      // si pas de personne on la cr√©e
            personCtrl.create(patient.getIdperson());
            LOGGER.debug("Created new person (id = %d)".formatted(patient.getIdperson().getIdperson()));
        }
        // Create patient if necessary
        if( patient.getIdpatient() == null ){					// we create the person and then the patient
            patientCtrl.create(patient);
            LOGGER.debug("Created new patient (id = %d)".formatted(patient.getIdpatient()));
        }
        
        // Save changes
        try {
            personCtrl.edit(patient.getIdperson());          // enregistre les modifs en appelant edit (on edit d'abord la personne puis le patient)
            patientCtrl.edit(patient);
            LOGGER.debug("Edited patient (id = %d)".formatted(patient.getIdpatient()));
        } catch (NonexistentEntityException | IllegalOrphanException ex) {
            LOGGER.error("Couldn't edit patient", ex);
        } catch (Exception ex){
            LOGGER.error("Couldn't edit patient", ex);
        }
        
        this.dispose();        
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ulb.lisa.infoh400.labs2022.view.AddPersonPanel addPersonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField phonenumberTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<String> statusComboBox;
}
