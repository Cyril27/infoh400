/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulb.lisa.infoh400.labs2022.view;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.pixelmed.network.StorageSOPClassSCPDispatcher;

import ulb.lisa.infoh400.labs2022.controller.AppointmentJpaController;
import ulb.lisa.infoh400.labs2022.controller.DoctorJpaController;
import ulb.lisa.infoh400.labs2022.controller.ImageJpaController;
import ulb.lisa.infoh400.labs2022.controller.PatientJpaController;
import ulb.lisa.infoh400.labs2022.controller.exceptions.IllegalOrphanException;
import ulb.lisa.infoh400.labs2022.controller.exceptions.NonexistentEntityException;
import ulb.lisa.infoh400.labs2022.model.Appointment;
import ulb.lisa.infoh400.labs2022.model.Doctor;
import ulb.lisa.infoh400.labs2022.model.Patient;
import ulb.lisa.lightweighthl7services.HL7SendWindow;

import java.awt.event.ActionListener;
//import java.awt.Image;
import ulb.lisa.infoh400.labs2022.model.Image;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;



/**
 *
 * @author Adrien Foucart
 */
public class MainWindow extends javax.swing.JFrame {
    
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("infoh400_PU"); //connexion à la bdd telle que définie dans infoh400
    private final PatientJpaController patientCtrl = new PatientJpaController(emfac); //classes générées auto par persistance
    private final DoctorJpaController doctorCtrl = new DoctorJpaController(emfac);
    private final ImageJpaController imageCtrl = new ImageJpaController(emfac);
    private final AppointmentJpaController appointmentCtrl = new AppointmentJpaController(emfac);
    
    private static final Logger LOGGER = LogManager.getLogger(MainWindow.class.getName());
    
    String selectedList = "";
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        LOGGER.info("Displaying main window");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doctorTextLabel1 = new javax.swing.JLabel();
        doctorImageLabel1 = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        patientImageLabel = new javax.swing.JLabel();
        patientTextLabel = new javax.swing.JLabel();
        doctorTextLabel = new javax.swing.JLabel();
        doctorImageLabel = new javax.swing.JLabel();
        AppointmentImageLabel = new javax.swing.JLabel();
        appointmentTextLabel = new javax.swing.JLabel();
        ImageImageLabel = new javax.swing.JLabel();
        ImageTextLabel = new javax.swing.JLabel();
        listPatientsButton = new javax.swing.JButton();
        listDoctorsButton = new javax.swing.JButton();
        listAppointmentsButton = new javax.swing.JButton();
        listImagesButton = new javax.swing.JButton();
        listImagesButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		listImagesButtonActionPerformed(e);
        	}
        });
        addPatientButton = new javax.swing.JButton();
        addDoctorButton = new javax.swing.JButton();
        addAppointmentButton = new javax.swing.JButton();
        addImageButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        editPatientButton = new javax.swing.JButton();
        editDoctorButton = new javax.swing.JButton();
        editAppointmentButton = new javax.swing.JButton();
        editImageButton = new javax.swing.JButton();
        deletePatientButton = new javax.swing.JButton();
        deleteAppointmentButton = new javax.swing.JButton();
        deleteDoctorButton = new javax.swing.JButton();
        deleteImageButton = new javax.swing.JButton();
        deleteImageButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		deleteImageButtonActionPerformed(e);
        	}
        });

        /*doctorTextLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doctorTextLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctorTextLabel1.setText("Doctors");

        doctorImageLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Doctor_575955.png"))); // NOI18N*/

        /* Creation of the different texts and images */
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        titleLabel.setBackground(new java.awt.Color(0, 0, 153));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("    Health Information System");
        titleLabel.setOpaque(true);

        patientImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Patient_287071.png"))); // NOI18N

        patientTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        patientTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patientTextLabel.setText("Patients");

        doctorTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doctorTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doctorTextLabel.setText("Doctors");

        doctorImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Doctor_575955.png"))); // NOI18N

        AppointmentImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_appointment_1701843.png"))); // NOI18N

        appointmentTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        appointmentTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        appointmentTextLabel.setText("Appointments");

        ImageImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_X-Ray_968744.png"))); // NOI18N

        ImageTextLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ImageTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ImageTextLabel.setText("Images");
        
        /* List buttons */

        listPatientsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listPatientsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPatientsButtonActionPerformed(evt);
            }
        });

        listDoctorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listDoctorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDoctorsButtonActionPerformed(evt);
            }
        });

        listAppointmentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listAppointmentsButton.setEnabled(true);
        listAppointmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAppointmentsButtonActionPerformed(evt);
            }
        });

        listImagesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_List_103471.png"))); // NOI18N
        listImagesButton.setEnabled(true);
        
        /* Add buttons */

        addPatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientButtonActionPerformed(evt);
            }
        });

        addDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addDoctorButton.setEnabled(true);
        addDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorButtonActionPerformed(evt);
            }
        });

        addAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addAppointmentButton.setEnabled(true);
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        addImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_add_3029252.png"))); // NOI18N
        addImageButton.setEnabled(true);
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });
        
        /* Edit buttons */

        editPatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editPatientButton.setEnabled(false); ////// TEEEEEST
        editPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPatientButtonActionPerformed(evt);
            }
        });

        editDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editDoctorButton.setEnabled(false);
        editDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDoctorButtonActionPerformed(evt);
            }
        });

        editAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editAppointmentButton.setEnabled(false);
        editAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentButtonActionPerformed(evt);
            }
        });

        editImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_edit_3029255.png"))); // NOI18N
        editImageButton.setEnabled(false);

        /* Delete buttons */
     
        deletePatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deletePatientButton.setEnabled(false);
        deletePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					deletePatientButtonActionPerformed(evt);
				} catch (IllegalOrphanException | NonexistentEntityException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });


        deleteDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deleteDoctorButton.setEnabled(false);
        deleteDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					deleteDoctorButtonActionPerformed(evt);
				} catch (IllegalOrphanException | NonexistentEntityException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        
        deleteAppointmentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deleteAppointmentButton.setEnabled(true);

        deleteImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/noun_Delete_756859.png"))); // NOI18N
        deleteImageButton.setEnabled(true);
        
        /* start server button */
        
        JButton SCPbutton = new JButton("start SCP server");
        SCPbutton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		SCPbuttonActionPerformed(e);
        		
        	}
        });
        
        /* Creation of ItemList object + sensitive to double click FOR THE IMAGE LIST AND PATIENT FOR THE ADT A01 MASSAGE */
        
        itemsList = new javax.swing.JList<>();
        
        
        itemsList.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		 if (selectedList.equalsIgnoreCase("Image") && e.getClickCount()==2) {
        			 EntityListModel<Image> model = (EntityListModel) itemsList.getModel();
        		     Image selected = model.getList().get(itemsList.getSelectedIndex());
        		     
        		     DicomImageWindow diw = new DicomImageWindow(selected);
        		     diw.setVisible(true);
        		 }
        		 
        		 if (selectedList.equalsIgnoreCase("Patient") && e.getClickCount()==2) {
        			 EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        		     Patient selected = model.getList().get(itemsList.getSelectedIndex());
        		     
        		     HL7SendWindow hl7Popup = new HL7SendWindow((Patient) selected);
        		     hl7Popup.setVisible(true);
        		 }
        		 
        	}
        });
        
        
        JButton HL7Button = new JButton("start HL7 server");
        HL7Button.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		HL7buttonActionPerformed(e);
        	}
        });
        

        /* Graphical features */
        
        
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 912, GroupLayout.PREFERRED_SIZE)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(150)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(itemsList, GroupLayout.PREFERRED_SIZE, 396, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(patientImageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(patientTextLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        							.addGap(60)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(doctorImageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(doctorTextLabel, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(editPatientButton, GroupLayout.PREFERRED_SIZE, 51, Short.MAX_VALUE)
        								.addComponent(listPatientsButton, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(addPatientButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(deletePatientButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        							.addGap(52)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(listDoctorsButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(editDoctorButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(addDoctorButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(deleteDoctorButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
        					.addGap(52)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(listAppointmentsButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(editAppointmentButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(addAppointmentButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(deleteAppointmentButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE))
        							.addGap(52)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(listImagesButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(editImageButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(addImageButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
        								.addComponent(deleteImageButton, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(AppointmentImageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(appointmentTextLabel, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
        							.addGap(60)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(ImageImageLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(ImageTextLabel, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(HL7Button, GroupLayout.PREFERRED_SIZE, 142, GroupLayout.PREFERRED_SIZE)
        								.addComponent(SCPbutton)))))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
        			.addGap(40)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createParallelGroup(Alignment.LEADING)
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(patientTextLabel)
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(patientImageLabel, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE))
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(doctorTextLabel)
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(doctorImageLabel, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE))
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(appointmentTextLabel)
        						.addPreferredGap(ComponentPlacement.RELATED)
        						.addComponent(AppointmentImageLabel, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(ImageTextLabel)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(SCPbutton)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(HL7Button))
        						.addComponent(ImageImageLabel, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE))))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        							.addComponent(listPatientsButton)
        							.addComponent(addPatientButton))
        						.addComponent(listDoctorsButton)
        						.addComponent(addDoctorButton))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(deletePatientButton)
        						.addComponent(editPatientButton)
        						.addComponent(editDoctorButton)
        						.addComponent(deleteDoctorButton)))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(listAppointmentsButton)
        						.addComponent(addAppointmentButton)
        						.addComponent(listImagesButton)
        						.addComponent(addImageButton))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(editAppointmentButton)
        						.addComponent(deleteAppointmentButton)
        						.addComponent(editImageButton, Alignment.LEADING)
        						.addComponent(deleteImageButton, Alignment.LEADING))))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        				.addComponent(itemsList, GroupLayout.PREFERRED_SIZE, 222, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /* End of initiation of components */ 
    
    /* Definition of functions */
    
    

    /* Add functions */

    private void addPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientButtonActionPerformed
        AddPatientWindow patientAddPopup = new AddPatientWindow();
        patientAddPopup.setVisible(true);
    }//GEN-LAST:event_addPatientButtonActionPerformed

    private void addDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorButtonActionPerformed
    	AddDoctorWindow doctorAddPopup = new AddDoctorWindow();
        doctorAddPopup.setVisible(true);	
    }//GEN-LAST:event_addDoctorButtonActionPerformed

    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
    	AddAppointmentWindow appointmentAddPopup = new AddAppointmentWindow();
    	appointmentAddPopup.setVisible(true);	
    }

    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
    	DicomDirectoryWindow dicomPopup = new DicomDirectoryWindow();
        dicomPopup.setVisible(true);
            }//GEN-LAST:event_addImageButtonActionPerformed
    
    
    /* Desactivation of buttons after use */
    
    private void disableButtons(){
        editPatientButton.setEnabled(false);   
        editDoctorButton.setEnabled(false);
        editAppointmentButton.setEnabled(false);
        editImageButton.setEnabled(false);
        
        deletePatientButton.setEnabled(false);
        deleteDoctorButton.setEnabled(false);
        deleteAppointmentButton.setEnabled(false);
        deleteImageButton.setEnabled(false);
    }
    
    
    /* Refresh of the list */
    
    private void refreshPatientList(){
        List patients = patientCtrl.findPatientEntities(); // List of patients
        EntityListModel<Patient> model = new EntityListModel(patients); // Specific list of patients objects
        // by calling this method, to string for the patient -> to sting of the person (found in the list when running the code)
        itemsList.setModel(model);  // Fit the model to the item list
    }
    
    private void refreshDoctorList(){
        List doctors = doctorCtrl.findDoctorEntities();
        EntityListModel<Doctor> model = new EntityListModel(doctors);
        itemsList.setModel(model);
    }
    
    private void refreshImagesList(){
        List images = imageCtrl.findImageEntities();
        EntityListModel<Image> model = new EntityListModel(images);
        itemsList.setModel(model);   // different to string for the imageList
    }
    
    private void refreshAppointmentsList() {
		List appointments = appointmentCtrl.findAppointmentEntities();
		EntityListModel<Appointment> model = new EntityListModel(appointments);
		itemsList.setModel(model);
	}
    
    
    /* Plot of the list*/
    
    private void listPatientsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPatientsButtonActionPerformed
    	selectedList = "Patient";													// used for the double click sensitivity of the list 
        refreshPatientList();
        disableButtons();
        editPatientButton.setEnabled(true);
        deletePatientButton.setEnabled(true);
    }//GEN-LAST:event_listPatientsButtonActionPerformed
    
    private void listDoctorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDoctorsButtonActionPerformed
    	selectedList = "Doctor";
        refreshDoctorList();
        disableButtons();
        editDoctorButton.setEnabled(true);
        deleteDoctorButton.setEnabled(true);
    }//GEN-LAST:event_listDoctorsButtonActionPerformed  
    
    private void listImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDoctorsButtonActionPerformed
    	selectedList = "Image";
        refreshImagesList();
        disableButtons();
        editImageButton.setEnabled(true);
        deleteImageButton.setEnabled(true);
    }
    
	private void listAppointmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_listDoctorsButtonActionPerformed
		selectedList = "Appointment";
		refreshAppointmentsList();
		disableButtons();
		editAppointmentButton.setEnabled(true);
		deleteAppointmentButton.setEnabled(true);
	}// GEN-LAST:event_listDoctorsButtonActionPerformed
    

    /* Edit functions*/
	
	
    private void editPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPatientButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());
        
        AddPatientWindow patientAddPopup = new AddPatientWindow();
        patientAddPopup.setPatient(selected);												// pre-filling of the the add patient window
        patientAddPopup.setVisible(true);
        
        patientAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshPatientList();
            }
        });
    }//GEN-LAST:event_editPatientButtonActionPerformed
    
    private void editDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDoctorButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Doctor> model = (EntityListModel) itemsList.getModel();
        Doctor selected = model.getList().get(itemsList.getSelectedIndex());
        
        AddDoctorWindow doctorAddPopup = new AddDoctorWindow();
        doctorAddPopup.setDoctor(selected);										
        doctorAddPopup.setVisible(true);
        
        doctorAddPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshDoctorList();
            }
        });
    }
    
    private void editAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editPatientButtonActionPerformed
		if (itemsList.getSelectedIndex() < 0) {
			return;
		}
		EntityListModel<Appointment> model = (EntityListModel) itemsList.getModel();
		Appointment selected = model.getList().get(itemsList.getSelectedIndex());

		AddAppointmentWindow appointmentAddPopup = new AddAppointmentWindow();
		appointmentAddPopup.setAppointment(selected);									// with the actual appointment window, cannot set
		appointmentAddPopup.setVisible(true);

		appointmentAddPopup.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent evt) {
				refreshAppointmentsList();
			}
		});
	}
    
    private void editImageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_editPatientButtonActionPerformed
		if (itemsList.getSelectedIndex() < 0) {
			return;
		}
		EntityListModel<Image> model = (EntityListModel) itemsList.getModel();
		Image selected = model.getList().get(itemsList.getSelectedIndex());

		DicomDirectoryWindow imageAddPopup = new DicomDirectoryWindow();
		// imageAddPopup.setImage(selected);
		imageAddPopup.setVisible(true);

		imageAddPopup.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent evt) {
				refreshImagesList();
			}
		});
	}// GEN-LAST:event_editPatientButtonActionPerformed

    
    
    /* Delete functions */
    

    private void deletePatientButtonActionPerformed(java.awt.event.ActionEvent evt) throws IllegalOrphanException, NonexistentEntityException {//GEN-FIRST:event_deletePatientButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());
        Pop popwindow = new Pop(selected);
        popwindow.setVisible(true);
        
        popwindow.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent evt){
                refreshPatientList();
            }
        });

        /*try {
            LOGGER.debug("Deleting patient with id: " + selected.getIdpatient());
            patientCtrl.destroy(selected.getIdpatient());
        } catch (IllegalOrphanException | NonexistentEntityException ex) {
            LOGGER.error("Failed to delete patient", ex);
        }*/
        
        
    }//GEN-LAST:event_deletePatientButtonActionPerformed
       
    
    private void deleteDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) throws IllegalOrphanException, NonexistentEntityException {//GEN-FIRST:event_deleteDoctorButtonActionPerformed
        if( itemsList.getSelectedIndex() < 0 ){
            return;
        }
        EntityListModel<Doctor> model = (EntityListModel) itemsList.getModel();
        Doctor selected = model.getList().get(itemsList.getSelectedIndex());
        
        LOGGER.debug("Deleting doctor with id: " + selected.getIddoctor());
		doctorCtrl.destroy(selected.getIddoctor());
        refreshDoctorList();
    }//GEN-LAST:event_deletePatientButtonActionPerformed
    
	private void deleteAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deletePatientButtonActionPerformed
		if (itemsList.getSelectedIndex() < 0) {
			return;
		}
		EntityListModel<Appointment> model = (EntityListModel) itemsList.getModel();
		Appointment selected = model.getList().get(itemsList.getSelectedIndex());

		try {
			LOGGER.debug("Deleting appointment with id: " + selected.getIdappointment());
			appointmentCtrl.destroy(selected.getIdappointment());
		} catch (NonexistentEntityException ex) {
			LOGGER.error("Failed to delete appointment", ex);
		}

		refreshAppointmentsList();
	}// GEN-LAST:event_deletePatientButtonActionPerformed

	private void deleteImageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deletePatientButtonActionPerformed
		if (itemsList.getSelectedIndex() < 0) {
			return;
		}
		EntityListModel<Image> model = (EntityListModel) itemsList.getModel();
		Image selected = model.getList().get(itemsList.getSelectedIndex());

		try {
			LOGGER.debug("Deleting image with id: " + selected.getIdimage());
			imageCtrl.destroy(selected.getIdimage());
		} catch (NonexistentEntityException ex) {
			LOGGER.error("Failed to image doctor", ex);
		}

		refreshImagesList();
	}// GEN-LAST:event_deletePatientButtonActionPerformed
	

    
    
	
	/* Servor connexion   (TP6) */
    
    // we create a SCP server that is listening on the port 11115  (start a STORESCP service)
	private void SCPbuttonActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			  System.out.println("starting");
			  new Thread(new StorageSOPClassSCPDispatcher(11115,"STORESCP",new File("/Users/cyrilvanleer/Desktop/PACS"),new OurReceivedObjectHandler())).start();
			  System.out.println("c'est good");
			}
			catch (IOException e) {
				System.out.println("problemo au servor");
			}
	}
	
	
	
	private void HL7buttonActionPerformed(java.awt.event.ActionEvent evt) {
		HL7Services hl7 = new HL7Services();
		hl7.startServer();
	}
	
	
	
	
	
	
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        LOGGER.info("Displaying main window");
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);  // Main fct basically creates just the MainWindow and then action based on listeners on the elements of the window
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AppointmentImageLabel;
    private javax.swing.JLabel ImageImageLabel;
    private javax.swing.JLabel ImageTextLabel;
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JButton addDoctorButton;
    private javax.swing.JButton addImageButton;
    private javax.swing.JButton addPatientButton;
    private javax.swing.JLabel appointmentTextLabel;
    private javax.swing.JButton deleteAppointmentButton;
    private javax.swing.JButton deleteDoctorButton;
    private javax.swing.JButton deleteImageButton;
    private javax.swing.JButton deletePatientButton;
    private javax.swing.JLabel doctorImageLabel;
    private javax.swing.JLabel doctorImageLabel1;
    private javax.swing.JLabel doctorTextLabel;
    private javax.swing.JLabel doctorTextLabel1;
    private javax.swing.JButton editAppointmentButton;
    private javax.swing.JButton editDoctorButton;
    private javax.swing.JButton editImageButton;
    private javax.swing.JButton editPatientButton;
    private javax.swing.JList<String> itemsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listAppointmentsButton;
    private javax.swing.JButton listDoctorsButton;
    private javax.swing.JButton listImagesButton;
    private javax.swing.JButton listPatientsButton;
    private javax.swing.JLabel patientImageLabel;
    private javax.swing.JLabel patientTextLabel;
    private javax.swing.JLabel titleLabel;
}

